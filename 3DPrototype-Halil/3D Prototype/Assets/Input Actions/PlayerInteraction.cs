//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Actions/PlayerInteraction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInteraction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInteraction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInteraction"",
    ""maps"": [
        {
            ""name"": ""PlayerInteractions"",
            ""id"": ""0b5d2734-e495-490b-840c-0155397ced55"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""87cee035-e06b-4d4d-8e66-3a574d43a996"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f8290fb-89b7-4bb6-8e22-257faafd983c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInteractions
        m_PlayerInteractions = asset.FindActionMap("PlayerInteractions", throwIfNotFound: true);
        m_PlayerInteractions_Interact = m_PlayerInteractions.FindAction("Interact", throwIfNotFound: true);
    }

    ~@PlayerInteraction()
    {
        UnityEngine.Debug.Assert(!m_PlayerInteractions.enabled, "This will cause a leak and performance issues, PlayerInteraction.PlayerInteractions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInteractions
    private readonly InputActionMap m_PlayerInteractions;
    private List<IPlayerInteractionsActions> m_PlayerInteractionsActionsCallbackInterfaces = new List<IPlayerInteractionsActions>();
    private readonly InputAction m_PlayerInteractions_Interact;
    public struct PlayerInteractionsActions
    {
        private @PlayerInteraction m_Wrapper;
        public PlayerInteractionsActions(@PlayerInteraction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_PlayerInteractions_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IPlayerInteractionsActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IPlayerInteractionsActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractionsActions @PlayerInteractions => new PlayerInteractionsActions(this);
    public interface IPlayerInteractionsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
